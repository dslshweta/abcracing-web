{"ast":null,"code":"import Router from 'next/router';\nimport { loginUser as loginUserApi } from '../../apis/login';\nimport { notify } from './notification';\nexport const LOGIN_USER_START = 'LOGIN_USER_START';\nexport const LOGIN_USER_END = 'LOGIN_USER_END';\nexport const ERROR_USER_LOGIN = 'ERROR_USER';\nexport function loginUserStart() {\n  return {\n    type: LOGIN_USER_START\n  };\n}\nexport function loginUserEnd(payload = {}) {\n  return {\n    type: LOGIN_USER_END,\n    payload\n  };\n}\nexport function raiseErrorLoginUser() {\n  return {\n    type: ERROR_USER_LOGIN\n  };\n}\nexport function loginUser(values) {\n  return dispatch => {\n    dispatch(loginUserStart());\n    loginUserApi(values).then(res => {\n      dispatch(loginUserEnd(res));\n      Router.push('/profile');\n    }).catch(() => {\n      dispatch(notify({\n        type: 'error',\n        message: 'Invalid Credentials'\n      }));\n      dispatch(raiseErrorLoginUser());\n    });\n  };\n}","map":{"version":3,"sources":["/var/www/html/abcracing-web/redux/actions/login.js"],"names":["Router","loginUser","loginUserApi","notify","LOGIN_USER_START","LOGIN_USER_END","ERROR_USER_LOGIN","loginUserStart","type","loginUserEnd","payload","raiseErrorLoginUser","values","dispatch","then","res","push","catch","message"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,SAAS,IAAIC,YAAtB,QAA0C,kBAA1C;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,gBAAgB,GAAG,YAAzB;AAEP,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAQ;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAR;AACD;AAED,OAAO,SAASK,YAAT,CAAsBC,OAAO,GAAG,EAAhC,EAAoC;AACzC,SAAQ;AAAEF,IAAAA,IAAI,EAAEH,cAAR;AAAwBK,IAAAA;AAAxB,GAAR;AACD;AAED,OAAO,SAASC,mBAAT,GAA+B;AACpC,SAAQ;AAAEH,IAAAA,IAAI,EAAEF;AAAR,GAAR;AACD;AAED,OAAO,SAASL,SAAT,CAAmBW,MAAnB,EAA2B;AAChC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AACAL,IAAAA,YAAY,CAACU,MAAD,CAAZ,CACGE,IADH,CACSC,GAAD,IAAS;AACbF,MAAAA,QAAQ,CAACJ,YAAY,CAACM,GAAD,CAAb,CAAR;AACAf,MAAAA,MAAM,CAACgB,IAAP,CAAY,UAAZ;AACD,KAJH,EAKGC,KALH,CAKS,MAAM;AACXJ,MAAAA,QAAQ,CAACV,MAAM,CAAC;AAAEK,QAAAA,IAAI,EAAE,OAAR;AAAiBU,QAAAA,OAAO,EAAE;AAA1B,OAAD,CAAP,CAAR;AACAL,MAAAA,QAAQ,CAACF,mBAAmB,EAApB,CAAR;AACD,KARH;AASD,GAXD;AAYD","sourcesContent":["import Router from 'next/router';\nimport { loginUser as loginUserApi } from '../../apis/login';\nimport { notify } from './notification';\n\nexport const LOGIN_USER_START = 'LOGIN_USER_START';\nexport const LOGIN_USER_END = 'LOGIN_USER_END';\nexport const ERROR_USER_LOGIN = 'ERROR_USER';\n\nexport function loginUserStart() {\n  return ({ type: LOGIN_USER_START });\n}\n\nexport function loginUserEnd(payload = {}) {\n  return ({ type: LOGIN_USER_END, payload });\n}\n\nexport function raiseErrorLoginUser() {\n  return ({ type: ERROR_USER_LOGIN });\n}\n\nexport function loginUser(values) {\n  return (dispatch) => {\n    dispatch(loginUserStart());\n    loginUserApi(values)\n      .then((res) => {\n        dispatch(loginUserEnd(res));\n        Router.push('/profile');\n      })\n      .catch(() => {\n        dispatch(notify({ type: 'error', message: 'Invalid Credentials' }));\n        dispatch(raiseErrorLoginUser());\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}