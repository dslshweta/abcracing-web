{"ast":null,"code":"import { useState } from 'react';\n\nconst useForm = ({\n  initialValues,\n  fields,\n  handleSubmit: _handleSubmit,\n  validate\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState(initialValues || {});\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: isFormDirty,\n    1: setFormDirty\n  } = useState(false);\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    setFormDirty(true);\n    const validationErrors = validate({\n      values\n    }) || {};\n\n    if (!Object.keys(validationErrors).length) {\n      _handleSubmit(values);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      target: {\n        name\n      }\n    } = event;\n    event.persist();\n    const updatedValues = fields[name].handleChange(event, values);\n    setValues(updatedValues);\n\n    if (isFormDirty) {\n      const validationErrors = validate({\n        values: updatedValues\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleBlur = () => {\n    if (isFormDirty) {\n      const validationErrors = validate({\n        values\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  return {\n    values,\n    setValues,\n    reset: () => setValues(initialValues),\n    isFormDirty,\n    errors,\n    events: {\n      onSubmit: handleSubmit,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }\n  };\n};\n\nexport default useForm;","map":null,"metadata":{},"sourceType":"module"}