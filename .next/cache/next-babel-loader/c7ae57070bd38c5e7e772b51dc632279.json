{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { OPEN_NOTIFICATION, CLOSE_NOTIFICATION } from '../actions/notification';\nconst initialState = {\n  isOpen: false,\n  info: {}\n};\nconst REDUCER_HANDLERS = {\n  [OPEN_NOTIFICATION]: (state, {\n    payload\n  }) => ({\n    isOpen: true,\n    info: payload\n  }),\n  [CLOSE_NOTIFICATION]: () => _objectSpread({}, initialState)\n}; // ------------------------------------\n// Reducer\n// ------------------------------------\n\nexport default function notifyReducer(state = initialState, action) {\n  const handler = REDUCER_HANDLERS[action.type];\n  return handler ? handler(state, action) : state;\n}","map":{"version":3,"sources":["/var/www/html/abcracing-web/redux/reducers/notification.js"],"names":["OPEN_NOTIFICATION","CLOSE_NOTIFICATION","initialState","isOpen","info","REDUCER_HANDLERS","state","payload","notifyReducer","action","handler","type"],"mappings":";;;;;;AAAA,SAASA,iBAAT,EAA4BC,kBAA5B,QAAsD,yBAAtD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,KADW;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB;AAKA,MAAMC,gBAAgB,GAAG;AACvB,GAACL,iBAAD,GAAqB,CAACM,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,MACnB;AACEJ,IAAAA,MAAM,EAAE,IADV;AAEEC,IAAAA,IAAI,EAAEG;AAFR,GADmB,CADE;AAOvB,GAACN,kBAAD,GAAsB,wBAEfC,YAFe;AAPC,CAAzB,C,CAcA;AACA;AACA;;AACA,eAAe,SAASM,aAAT,CAAuBF,KAAK,GAAGJ,YAA/B,EAA6CO,MAA7C,EAAqD;AAClE,QAAMC,OAAO,GAAGL,gBAAgB,CAACI,MAAM,CAACE,IAAR,CAAhC;AACA,SAAOD,OAAO,GAAGA,OAAO,CAACJ,KAAD,EAAQG,MAAR,CAAV,GAA4BH,KAA1C;AACD","sourcesContent":["import { OPEN_NOTIFICATION, CLOSE_NOTIFICATION } from '../actions/notification';\n\nconst initialState = {\n  isOpen: false,\n  info: {},\n};\n\nconst REDUCER_HANDLERS = {\n  [OPEN_NOTIFICATION]: (state, { payload }) => (\n    {\n      isOpen: true,\n      info: payload,\n    }\n  ),\n  [CLOSE_NOTIFICATION]: () => (\n    {\n      ...initialState,\n    }\n  ),\n};\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nexport default function notifyReducer(state = initialState, action) {\n  const handler = REDUCER_HANDLERS[action.type];\n  return handler ? handler(state, action) : state;\n}\n"]},"metadata":{},"sourceType":"module"}