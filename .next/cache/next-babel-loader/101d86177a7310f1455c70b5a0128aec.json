{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"antd/lib/config-provider/style\";\nimport _ConfigProvider from \"antd/lib/config-provider\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/var/www/html/abcracing-web/pages/_app.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport App from 'next/app';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport createStore from '../redux/store';\nimport Notification from '../common/components/Notification';\nimport { locale as localeConstants } from '../common/constants';\nimport getTranslations from '../locales';\nimport '../assets/styles/global.less';\n\nvar Racing = /*#__PURE__*/function (_App) {\n  _inherits(Racing, _App);\n\n  var _super = _createSuper(Racing);\n\n  function Racing() {\n    _classCallCheck(this, Racing);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Racing, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          store = _this$props.store;\n      var _Component$View = Component.View,\n          View = _Component$View === void 0 ? React.Fragment : _Component$View,\n          _Component$Layout = Component.Layout,\n          Layout = _Component$Layout === void 0 ? React.Fragment : _Component$Layout,\n          _Component$RouteGuard = Component.RouteGuard,\n          RouteGuard = _Component$RouteGuard === void 0 ? React.Fragment : _Component$RouteGuard; // note: update here as change local get implemented over app.\n\n      var localeName = localeConstants.EN;\n      var translations = getTranslations(localeName);\n      return __jsx(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, __jsx(IntlProvider, {\n        locale: localeName,\n        messages: translations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, __jsx(_ConfigProvider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }\n      }, __jsx(Notification, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }), __jsx(RouteGuard, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }\n      }, __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }\n      }, __jsx(View, _extends({}, pageProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      })))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var Component, ctx, pageProps;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Component = _ref.Component, ctx = _ref.ctx;\n\n              if (!Component.getInitialProps) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Component.getInitialProps({\n                ctx: ctx\n              }));\n\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 7:\n              _context.t0 = {};\n\n            case 8:\n              pageProps = _context.t0;\n              return _context.abrupt(\"return\", {\n                pageProps: pageProps\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return Racing;\n}(App); // withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(createStore)(Racing);","map":{"version":3,"sources":["/var/www/html/abcracing-web/pages/_app.jsx"],"names":["App","IntlProvider","Provider","withRedux","createStore","Notification","locale","localeConstants","getTranslations","Racing","props","Component","pageProps","store","View","React","Fragment","Layout","RouteGuard","localeName","EN","translations","ctx","getInitialProps"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,SAASC,MAAM,IAAIC,eAAnB,QAA0C,qBAA1C;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAO,8BAAP;;IAEMC,M;;;;;;;;;;;;;6BAOK;AAAA,wBACiC,KAAKC,KADtC;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAAA,UACuBC,KADvB,eACuBA,KADvB;AAAA,4BAIHF,SAJG,CAGLG,IAHK;AAAA,UAGLA,IAHK,gCAGEC,KAAK,CAACC,QAHR;AAAA,8BAIHL,SAJG,CAGkBM,MAHlB;AAAA,UAGkBA,MAHlB,kCAG2BF,KAAK,CAACC,QAHjC;AAAA,kCAIHL,SAJG,CAG2CO,UAH3C;AAAA,UAG2CA,UAH3C,sCAGwDH,KAAK,CAACC,QAH9D,0BAKP;;AACA,UAAMG,UAAU,GAAGZ,eAAe,CAACa,EAAnC;AACA,UAAMC,YAAY,GAAGb,eAAe,CAACW,UAAD,CAApC;AACA,aACE,MAAC,QAAD;AAAU,QAAA,KAAK,EAAEN,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAc,QAAA,MAAM,EAAEM,UAAtB;AAAkC,QAAA,QAAQ,EAAEE,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,IAAD,eAAUT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF,CAFF,CADF,CADF,CADF;AAcD;;;;;;;;;AA5B8BD,cAAAA,S,QAAAA,S,EAAWW,G,QAAAA,G;;mBACtBX,SAAS,CAACY,e;;;;;;+CAAwBZ,SAAS,CAACY,eAAV,CAA0B;AAAED,gBAAAA,GAAG,EAAHA;AAAF,eAA1B,C;;;;;;;;4BAAqC,E;;;AAAnFV,cAAAA,S;+CAEC;AAAEA,gBAAAA,SAAS,EAATA;AAAF,e;;;;;;;;;;;;EAJUZ,G,GAgCrB;;;AACA,eAAeG,SAAS,CAACC,WAAD,CAAT,CAAuBK,MAAvB,CAAf","sourcesContent":["import App from 'next/app';\nimport { ConfigProvider as ConfigProviderAntd } from 'antd';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport createStore from '../redux/store';\nimport Notification from '../common/components/Notification';\nimport { locale as localeConstants } from '../common/constants';\nimport getTranslations from '../locales';\nimport '../assets/styles/global.less';\n\nclass Racing extends App {\n  static async getInitialProps({ Component, ctx }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps({ ctx }) : {};\n    // anything returned here can be access by the client\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, pageProps, store } = this.props;\n    const {\n      View = React.Fragment, Layout = React.Fragment, RouteGuard = React.Fragment,\n    } = Component;\n    // note: update here as change local get implemented over app.\n    const localeName = localeConstants.EN;\n    const translations = getTranslations(localeName);\n    return (\n      <Provider store={store}>\n        <IntlProvider locale={localeName} messages={translations}>\n          <ConfigProviderAntd>\n            <Notification />\n            <RouteGuard>\n              <Layout>\n                <View {...pageProps} />\n              </Layout>\n            </RouteGuard>\n          </ConfigProviderAntd>\n        </IntlProvider>\n      </Provider>\n    );\n  }\n}\n\n// withRedux wrapper that passes the store to the App Component\nexport default withRedux(createStore)(Racing);\n"]},"metadata":{},"sourceType":"module"}