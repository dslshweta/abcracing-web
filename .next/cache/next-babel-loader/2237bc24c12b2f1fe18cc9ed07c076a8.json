{"ast":null,"code":"import \"antd/lib/config-provider/style\";\nimport _ConfigProvider from \"antd/lib/config-provider\";\nvar _jsxFileName = \"/var/www/html/abcracing-web/pages/_app.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport createStore from '../redux/store';\nimport Notification from '../common/components/Notification';\nimport { locale as localeConstants } from '../common/constants';\nimport getTranslations from '../locales';\nimport '../assets/styles/global.less';\n\nclass Racing extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps({\n      ctx\n    }) : {}; // anything returned here can be access by the client\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    const {\n      View = React.Fragment,\n      Layout = React.Fragment,\n      RouteGuard = React.Fragment\n    } = Component; // note: update here as change local get implemented over app.\n\n    const localeName = localeConstants.EN;\n    const translations = getTranslations(localeName);\n    return __jsx(Provider, {\n      store: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(IntlProvider, {\n      locale: localeName,\n      messages: translations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, __jsx(_ConfigProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, __jsx(Notification, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }), __jsx(RouteGuard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, __jsx(View, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    })))))));\n  }\n\n} // withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(createStore)(Racing);","map":{"version":3,"sources":["/var/www/html/abcracing-web/pages/_app.jsx"],"names":["App","IntlProvider","Provider","withRedux","createStore","Notification","locale","localeConstants","getTranslations","Racing","getInitialProps","Component","ctx","pageProps","render","store","props","View","React","Fragment","Layout","RouteGuard","localeName","EN","translations"],"mappings":";;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AAEA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,SAASC,MAAM,IAAIC,eAAnB,QAA0C,qBAA1C;AACA,OAAOC,eAAP,MAA4B,YAA5B;AACA,OAAO,8BAAP;;AAEA,MAAMC,MAAN,SAAqBT,GAArB,CAAyB;AACvB,eAAaU,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0B;AAAEE,MAAAA;AAAF,KAA1B,CAAlC,GAAuE,EAAzF,CAD+C,CAE/C;;AACA,WAAO;AAAEC,MAAAA;AAAF,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEH,MAAAA,SAAF;AAAaE,MAAAA,SAAb;AAAwBE,MAAAA;AAAxB,QAAkC,KAAKC,KAA7C;AACA,UAAM;AACJC,MAAAA,IAAI,GAAGC,KAAK,CAACC,QADT;AACmBC,MAAAA,MAAM,GAAGF,KAAK,CAACC,QADlC;AAC4CE,MAAAA,UAAU,GAAGH,KAAK,CAACC;AAD/D,QAEFR,SAFJ,CAFO,CAKP;;AACA,UAAMW,UAAU,GAAGf,eAAe,CAACgB,EAAnC;AACA,UAAMC,YAAY,GAAGhB,eAAe,CAACc,UAAD,CAApC;AACA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAEP,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AAAc,MAAA,MAAM,EAAEO,UAAtB;AAAkC,MAAA,QAAQ,EAAEE,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,eAAUX,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,CAFF,CADF,CADF,CADF;AAcD;;AA7BsB,C,CAgCzB;;;AACA,eAAeV,SAAS,CAACC,WAAD,CAAT,CAAuBK,MAAvB,CAAf","sourcesContent":["import App from 'next/app';\nimport { ConfigProvider as ConfigProviderAntd } from 'antd';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport createStore from '../redux/store';\nimport Notification from '../common/components/Notification';\nimport { locale as localeConstants } from '../common/constants';\nimport getTranslations from '../locales';\nimport '../assets/styles/global.less';\n\nclass Racing extends App {\n  static async getInitialProps({ Component, ctx }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps({ ctx }) : {};\n    // anything returned here can be access by the client\n    return { pageProps };\n  }\n\n  render() {\n    const { Component, pageProps, store } = this.props;\n    const {\n      View = React.Fragment, Layout = React.Fragment, RouteGuard = React.Fragment,\n    } = Component;\n    // note: update here as change local get implemented over app.\n    const localeName = localeConstants.EN;\n    const translations = getTranslations(localeName);\n    return (\n      <Provider store={store}>\n        <IntlProvider locale={localeName} messages={translations}>\n          <ConfigProviderAntd>\n            <Notification />\n            <RouteGuard>\n              <Layout>\n                <View {...pageProps} />\n              </Layout>\n            </RouteGuard>\n          </ConfigProviderAntd>\n        </IntlProvider>\n      </Provider>\n    );\n  }\n}\n\n// withRedux wrapper that passes the store to the App Component\nexport default withRedux(createStore)(Racing);\n"]},"metadata":{},"sourceType":"module"}