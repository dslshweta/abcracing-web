{"ast":null,"code":"import { useState } from 'react';\n\nconst useForm = ({\n  initialValues,\n  fields,\n  handleSubmit: _handleSubmit,\n  validate\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState(initialValues || {});\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: isFormDirty,\n    1: setFormDirty\n  } = useState(false);\n\n  const handleSubmit = event => {\n    if (event) event.preventDefault();\n    setFormDirty(true);\n    const validationErrors = validate({\n      values\n    }) || {};\n\n    if (!Object.keys(validationErrors).length) {\n      _handleSubmit(values);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      target: {\n        name\n      }\n    } = event;\n    event.persist();\n    const updatedValues = fields[name].handleChange(event, values);\n    setValues(updatedValues);\n\n    if (isFormDirty) {\n      const validationErrors = validate({\n        values: updatedValues\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleBlur = () => {\n    if (isFormDirty) {\n      const validationErrors = validate({\n        values\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  return {\n    values,\n    setValues,\n    reset: () => setValues(initialValues),\n    isFormDirty,\n    errors,\n    events: {\n      onSubmit: handleSubmit,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/var/www/html/abcracing-web/common/hooks/form.js"],"names":["useState","useForm","initialValues","fields","handleSubmit","_handleSubmit","validate","values","setValues","errors","setErrors","isFormDirty","setFormDirty","event","preventDefault","validationErrors","Object","keys","length","handleChange","target","name","persist","updatedValues","handleBlur","reset","events","onSubmit","onBlur","onChange"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AACfC,EAAAA,aADe;AACAC,EAAAA,MADA;AACQC,EAAAA,YAAY,EAAEC,aADtB;AACqCC,EAAAA;AADrC,CAAD,KAEV;AACJ,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAACE,aAAa,IAAI,EAAlB,CAApC;AACA,QAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAA8BZ,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMI,YAAY,GAAIS,KAAD,IAAW;AAC9B,QAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AAEXF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMG,gBAAgB,GAAGT,QAAQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAR,IAAwB,EAAjD;;AACA,QAAI,CAACS,MAAM,CAACC,IAAP,CAAYF,gBAAZ,EAA8BG,MAAnC,EAA2C;AACzCb,MAAAA,aAAa,CAACE,MAAD,CAAb;AACD,KAFD,MAEO;AACLG,MAAAA,SAAS,CAACK,gBAAD,CAAT;AACD;AACF,GAVD;;AAYA,QAAMI,YAAY,GAAIN,KAAD,IAAW;AAC9B,UAAM;AAAEO,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,QAAuBR,KAA7B;AACAA,IAAAA,KAAK,CAACS,OAAN;AACA,UAAMC,aAAa,GAAGpB,MAAM,CAACkB,IAAD,CAAN,CAAaF,YAAb,CAA0BN,KAA1B,EAAiCN,MAAjC,CAAtB;AACAC,IAAAA,SAAS,CAACe,aAAD,CAAT;;AACA,QAAIZ,WAAJ,EAAiB;AACf,YAAMI,gBAAgB,GAAGT,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAEgB;AAAV,OAAD,CAAR,IAAuC,EAAhE;AACAb,MAAAA,SAAS,CAACK,gBAAD,CAAT;AACD;AACF,GATD;;AAWA,QAAMS,UAAU,GAAG,MAAM;AACvB,QAAIb,WAAJ,EAAiB;AACf,YAAMI,gBAAgB,GAAGT,QAAQ,CAAC;AAAEC,QAAAA;AAAF,OAAD,CAAR,IAAwB,EAAjD;AACAG,MAAAA,SAAS,CAACK,gBAAD,CAAT;AACD;AACF,GALD;;AAOA,SAAO;AACLR,IAAAA,MADK;AAELC,IAAAA,SAFK;AAGLiB,IAAAA,KAAK,EAAE,MAAMjB,SAAS,CAACN,aAAD,CAHjB;AAILS,IAAAA,WAJK;AAKLF,IAAAA,MALK;AAMLiB,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEvB,YADJ;AAENwB,MAAAA,MAAM,EAAEJ,UAFF;AAGNK,MAAAA,QAAQ,EAAEV;AAHJ;AANH,GAAP;AAYD,CAjDD;;AAmDA,eAAelB,OAAf","sourcesContent":["import { useState } from 'react';\n\nconst useForm = ({\n  initialValues, fields, handleSubmit: _handleSubmit, validate,\n}) => {\n  const [values, setValues] = useState(initialValues || {});\n  const [errors, setErrors] = useState({});\n  const [isFormDirty, setFormDirty] = useState(false);\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n\n    setFormDirty(true);\n    const validationErrors = validate({ values }) || {};\n    if (!Object.keys(validationErrors).length) {\n      _handleSubmit(values);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { target: { name } } = event;\n    event.persist();\n    const updatedValues = fields[name].handleChange(event, values);\n    setValues(updatedValues);\n    if (isFormDirty) {\n      const validationErrors = validate({ values: updatedValues }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleBlur = () => {\n    if (isFormDirty) {\n      const validationErrors = validate({ values }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  return {\n    values,\n    setValues,\n    reset: () => setValues(initialValues),\n    isFormDirty,\n    errors,\n    events: {\n      onSubmit: handleSubmit,\n      onBlur: handleBlur,\n      onChange: handleChange,\n    },\n  };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}