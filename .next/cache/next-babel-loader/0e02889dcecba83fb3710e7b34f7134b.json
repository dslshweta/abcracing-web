{"ast":null,"code":"import \"antd/lib/config-provider/style\";\nimport _ConfigProvider from \"antd/lib/config-provider\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from 'next/app';\nimport { IntlProvider } from 'react-intl';\nimport { Provider } from 'react-redux';\nimport withRedux from 'next-redux-wrapper';\nimport createStore from '../redux/store';\nimport Notification from '../common/components/Notification';\nimport { locale as localeConstants } from '../common/constants';\nimport getTranslations from '../locales';\nimport '../assets/styles/global.less';\n\nclass Racing extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps({\n      ctx\n    }) : {}; // anything returned here can be access by the client\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    const {\n      View = React.Fragment,\n      Layout = React.Fragment,\n      RouteGuard = React.Fragment\n    } = Component; // note: update here as change local get implemented over app.\n\n    const localeName = localeConstants.EN;\n    const translations = getTranslations(localeName);\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(IntlProvider, {\n      locale: localeName,\n      messages: translations\n    }, __jsx(_ConfigProvider, null, __jsx(Notification, null), __jsx(RouteGuard, null, __jsx(Layout, null, __jsx(View, pageProps))))));\n  }\n\n} // withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(createStore)(Racing);","map":null,"metadata":{},"sourceType":"module"}