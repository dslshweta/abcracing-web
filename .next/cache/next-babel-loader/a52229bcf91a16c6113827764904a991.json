{"ast":null,"code":"import { useState } from 'react';\n\nvar useForm = function useForm(_ref) {\n  var initialValues = _ref.initialValues,\n      fields = _ref.fields,\n      _handleSubmit = _ref.handleSubmit,\n      validate = _ref.validate;\n\n  var _useState = useState(initialValues || {}),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useState2 = useState({}),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(false),\n      isFormDirty = _useState3[0],\n      setFormDirty = _useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    if (event) event.preventDefault();\n    setFormDirty(true);\n    var validationErrors = validate({\n      values: values\n    }) || {};\n\n    if (!Object.keys(validationErrors).length) {\n      _handleSubmit(values);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    var name = event.target.name;\n    event.persist();\n    var updatedValues = fields[name].handleChange(event, values);\n    setValues(updatedValues);\n\n    if (isFormDirty) {\n      var validationErrors = validate({\n        values: updatedValues\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  var handleBlur = function handleBlur() {\n    if (isFormDirty) {\n      var validationErrors = validate({\n        values: values\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  return {\n    values: values,\n    setValues: setValues,\n    reset: function reset() {\n      return setValues(initialValues);\n    },\n    isFormDirty: isFormDirty,\n    errors: errors,\n    events: {\n      onSubmit: handleSubmit,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }\n  };\n};\n\nexport default useForm;","map":null,"metadata":{},"sourceType":"module"}