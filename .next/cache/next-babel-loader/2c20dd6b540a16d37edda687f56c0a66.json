{"ast":null,"code":"import { useState } from 'react';\n\nvar useForm = function useForm(_ref) {\n  var initialValues = _ref.initialValues,\n      fields = _ref.fields,\n      _handleSubmit = _ref.handleSubmit,\n      validate = _ref.validate;\n\n  var _useState = useState(initialValues || {}),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var _useState2 = useState({}),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(false),\n      isFormDirty = _useState3[0],\n      setFormDirty = _useState3[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    if (event) event.preventDefault();\n    setFormDirty(true);\n    var validationErrors = validate({\n      values: values\n    }) || {};\n\n    if (!Object.keys(validationErrors).length) {\n      _handleSubmit(values);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    var name = event.target.name;\n    event.persist();\n    var updatedValues = fields[name].handleChange(event, values);\n    setValues(updatedValues);\n\n    if (isFormDirty) {\n      var validationErrors = validate({\n        values: updatedValues\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  var handleBlur = function handleBlur() {\n    if (isFormDirty) {\n      var validationErrors = validate({\n        values: values\n      }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  return {\n    values: values,\n    setValues: setValues,\n    reset: function reset() {\n      return setValues(initialValues);\n    },\n    isFormDirty: isFormDirty,\n    errors: errors,\n    events: {\n      onSubmit: handleSubmit,\n      onBlur: handleBlur,\n      onChange: handleChange\n    }\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["/var/www/html/abcracing-web/common/hooks/form.js"],"names":["useState","useForm","initialValues","fields","_handleSubmit","handleSubmit","validate","values","setValues","errors","setErrors","isFormDirty","setFormDirty","event","preventDefault","validationErrors","Object","keys","length","handleChange","name","target","persist","updatedValues","handleBlur","reset","events","onSubmit","onBlur","onChange"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAEV;AAAA,MADJC,aACI,QADJA,aACI;AAAA,MADWC,MACX,QADWA,MACX;AAAA,MADiCC,aACjC,QADmBC,YACnB;AAAA,MADgDC,QAChD,QADgDA,QAChD;;AAAA,kBACwBN,QAAQ,CAACE,aAAa,IAAI,EAAlB,CADhC;AAAA,MACGK,MADH;AAAA,MACWC,SADX;;AAAA,mBAEwBR,QAAQ,CAAC,EAAD,CAFhC;AAAA,MAEGS,MAFH;AAAA,MAEWC,SAFX;;AAAA,mBAGgCV,QAAQ,CAAC,KAAD,CAHxC;AAAA,MAGGW,WAHH;AAAA,MAGgBC,YAHhB;;AAKJ,MAAMP,YAAY,GAAG,SAAfA,YAAe,CAACQ,KAAD,EAAW;AAC9B,QAAIA,KAAJ,EAAWA,KAAK,CAACC,cAAN;AAEXF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,QAAMG,gBAAgB,GAAGT,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAANA;AAAF,KAAD,CAAR,IAAwB,EAAjD;;AACA,QAAI,CAACS,MAAM,CAACC,IAAP,CAAYF,gBAAZ,EAA8BG,MAAnC,EAA2C;AACzCd,MAAAA,aAAa,CAACG,MAAD,CAAb;AACD,KAFD,MAEO;AACLG,MAAAA,SAAS,CAACK,gBAAD,CAAT;AACD;AACF,GAVD;;AAYA,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAACN,KAAD,EAAW;AAAA,QACZO,IADY,GACDP,KADC,CACtBQ,MADsB,CACZD,IADY;AAE9BP,IAAAA,KAAK,CAACS,OAAN;AACA,QAAMC,aAAa,GAAGpB,MAAM,CAACiB,IAAD,CAAN,CAAaD,YAAb,CAA0BN,KAA1B,EAAiCN,MAAjC,CAAtB;AACAC,IAAAA,SAAS,CAACe,aAAD,CAAT;;AACA,QAAIZ,WAAJ,EAAiB;AACf,UAAMI,gBAAgB,GAAGT,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAAEgB;AAAV,OAAD,CAAR,IAAuC,EAAhE;AACAb,MAAAA,SAAS,CAACK,gBAAD,CAAT;AACD;AACF,GATD;;AAWA,MAAMS,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIb,WAAJ,EAAiB;AACf,UAAMI,gBAAgB,GAAGT,QAAQ,CAAC;AAAEC,QAAAA,MAAM,EAANA;AAAF,OAAD,CAAR,IAAwB,EAAjD;AACAG,MAAAA,SAAS,CAACK,gBAAD,CAAT;AACD;AACF,GALD;;AAOA,SAAO;AACLR,IAAAA,MAAM,EAANA,MADK;AAELC,IAAAA,SAAS,EAATA,SAFK;AAGLiB,IAAAA,KAAK,EAAE;AAAA,aAAMjB,SAAS,CAACN,aAAD,CAAf;AAAA,KAHF;AAILS,IAAAA,WAAW,EAAXA,WAJK;AAKLF,IAAAA,MAAM,EAANA,MALK;AAMLiB,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEtB,YADJ;AAENuB,MAAAA,MAAM,EAAEJ,UAFF;AAGNK,MAAAA,QAAQ,EAAEV;AAHJ;AANH,GAAP;AAYD,CAjDD;;AAmDA,eAAelB,OAAf","sourcesContent":["import { useState } from 'react';\n\nconst useForm = ({\n  initialValues, fields, handleSubmit: _handleSubmit, validate,\n}) => {\n  const [values, setValues] = useState(initialValues || {});\n  const [errors, setErrors] = useState({});\n  const [isFormDirty, setFormDirty] = useState(false);\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n\n    setFormDirty(true);\n    const validationErrors = validate({ values }) || {};\n    if (!Object.keys(validationErrors).length) {\n      _handleSubmit(values);\n    } else {\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { target: { name } } = event;\n    event.persist();\n    const updatedValues = fields[name].handleChange(event, values);\n    setValues(updatedValues);\n    if (isFormDirty) {\n      const validationErrors = validate({ values: updatedValues }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  const handleBlur = () => {\n    if (isFormDirty) {\n      const validationErrors = validate({ values }) || {};\n      setErrors(validationErrors);\n    }\n  };\n\n  return {\n    values,\n    setValues,\n    reset: () => setValues(initialValues),\n    isFormDirty,\n    errors,\n    events: {\n      onSubmit: handleSubmit,\n      onBlur: handleBlur,\n      onChange: handleChange,\n    },\n  };\n};\n\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}